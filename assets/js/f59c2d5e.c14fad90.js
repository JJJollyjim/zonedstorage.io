"use strict";(self.webpackChunkzonedstorage_io=self.webpackChunkzonedstorage_io||[]).push([[524],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return u}});var a=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var c=a.createContext({}),d=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},s=function(e){var n=d(e.components);return a.createElement(c.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,o=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),p=d(t),u=l,k=p["".concat(c,".").concat(u)]||p[u]||m[u]||o;return t?a.createElement(k,r(r({ref:n},s),{},{components:t})):a.createElement(k,r({ref:n},s))}));function u(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var o=t.length,r=new Array(o);r[0]=p;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:l,r[1]=i;for(var d=2;d<o;d++)r[d]=t[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},9088:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return c},default:function(){return u},frontMatter:function(){return i},metadata:function(){return d},toc:function(){return m}});var a=t(3117),l=t(102),o=(t(7294),t(3905)),r=["components"],i={id:"nullblk",title:"Zoned Block Device Emulation with nullblk",sidebar_label:"Zoned Block Device Emulation with nullblk"},c="Zoned Block Device Emulation with *null_blk*",d={unversionedId:"getting-started/nullblk",id:"getting-started/nullblk",title:"Zoned Block Device Emulation with nullblk",description:"The",source:"@site/docs/getting-started/nullblk.md",sourceDirName:"getting-started",slug:"/getting-started/nullblk",permalink:"/docs/getting-started/nullblk",tags:[],version:"current",frontMatter:{id:"nullblk",title:"Zoned Block Device Emulation with nullblk",sidebar_label:"Zoned Block Device Emulation with nullblk"},sidebar:"docs",previous:{title:"System Prerequisites",permalink:"/docs/getting-started/prerequisites"},next:{title:"Getting Started with SMR Hard-Disks",permalink:"/docs/getting-started/smr-disk"}},s={},m=[{value:"Creating a Zoned <em>null</em> Block Device \u2014 Simplest Case",id:"creating-a-zoned-null-block-device--simplest-case",level:2},{value:"Listing <em>null_blk</em> Zoned Block Device Parameters",id:"listing-null_blk-zoned-block-device-parameters",level:2},{value:"Creating a <em>null_blk</em> Zoned Block Device \u2014 More Advanced Cases (configfs)",id:"creating-a-null_blk-zoned-block-device--more-advanced-cases-configfs",level:2},{value:"Deleting a <em>null_blk</em> Zoned Block Device",id:"deleting-a-null_blk-zoned-block-device",level:2},{value:"Deleting ZBD that were created with modprobe",id:"deleting-zbd-that-were-created-with-modprobe",level:3},{value:"Deleting ZBD that were created with configfs",id:"deleting-zbd-that-were-created-with-configfs",level:3},{value:"Emulating SMR HDD",id:"emulating-smr-hdd",level:2},{value:"Emulating NVMe ZNS SSD",id:"emulating-nvme-zns-ssd",level:2}],p={toc:m};function u(e){var n=e.components,t=(0,l.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"zoned-block-device-emulation-with-null_blk"},"Zoned Block Device Emulation with ",(0,o.kt)("em",{parentName:"h1"},"null_blk")),(0,o.kt)("p",null,"The\n",(0,o.kt)("a",{parentName:"p",href:"https://www.kernel.org/doc/Documentation/block/null_blk.txt"},"Linux","\xae"," ",(0,o.kt)("em",{parentName:"a"},"null_blk")," driver"),"\nis a powerful tool that can emulate various types of block devices.\nSince kernel version 4.19, the ",(0,o.kt)("em",{parentName:"p"},"null_blk")," driver has been able to\nemulate zoned block devices. Because memory backup has been added to\nthe ",(0,o.kt)("em",{parentName:"p"},"null_blk")," device for data reading and writing operations, the\n",(0,o.kt)("em",{parentName:"p"},"null_blk")," driver has become a practical, powerful tool that can be\nused for application development and tests."),(0,o.kt)("h2",{id:"creating-a-zoned-null-block-device--simplest-case"},"Creating a Zoned ",(0,o.kt)("em",{parentName:"h2"},"null")," Block Device ","\u2014"," Simplest Case"),(0,o.kt)("p",null,"The simplest way to create a ",(0,o.kt)("em",{parentName:"p"},"null_blk")," emulated zoned block\ndevice is to specify ",(0,o.kt)("inlineCode",{parentName:"p"},"zoned=1")," as an argument that follows the\n",(0,o.kt)("em",{parentName:"p"},"modprobe **null_blk")," command on the command line, as in the following\nexample:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-plaintext"},"# modprobe null_blk nr_devices=1 zoned=1\n")),(0,o.kt)("p",null,"This creates a single, host-managed zoned block device that has a zone\nsize of 256M and a total capacity of 250 GB (1000 zones). No\nconventional zones are created with this simple command."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-plaintext"},"# blkzone report /dev/nullb0\n  start: 0x000000000, len 0x080000, cap 0x080000, wptr 0x000000 reset:0 non-seq:0, zcond: 1(em) [type: 2(SEQ_WRITE_REQUIRED)]\n  start: 0x000080000, len 0x080000, cap 0x080000, wptr 0x000000 reset:0 non-seq:0, zcond: 1(em) [type: 2(SEQ_WRITE_REQUIRED)]\n  start: 0x000100000, len 0x080000, cap 0x080000, wptr 0x000000 reset:0 non-seq:0, zcond: 1(em) [type: 2(SEQ_WRITE_REQUIRED)]\n  start: 0x000180000, len 0x080000, cap 0x080000, wptr 0x000000 reset:0 non-seq:0, zcond: 1(em) [type: 2(SEQ_WRITE_REQUIRED)]\n...\n  start: 0x01f300000, len 0x080000, cap 0x080000, wptr 0x000000 reset:0 non-seq:0, zcond: 1(em) [type: 2(SEQ_WRITE_REQUIRED)]\n  start: 0x01f380000, len 0x080000, cap 0x080000, wptr 0x000000 reset:0 non-seq:0, zcond: 1(em) [type: 2(SEQ_WRITE_REQUIRED)]\n")),(0,o.kt)("h2",{id:"listing-null_blk-zoned-block-device-parameters"},"Listing ",(0,o.kt)("em",{parentName:"h2"},"null_blk")," Zoned Block Device Parameters"),(0,o.kt)("p",null,"The ",(0,o.kt)("em",{parentName:"p"},"null_blk")," kernel module accepts many arguments to adjust the zone\nconfiguration of the emulated device. The zone-related arguments can\nbe listed using the ",(0,o.kt)("em",{parentName:"p"},"modinfo")," command and those arguments can be\nmodified by using ",(0,o.kt)("em",{parentName:"p"},"configfs")," once the ",(0,o.kt)("em",{parentName:"p"},"null_blk")," module is loaded."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# modinfo null_blk\n...\nparm:           zoned:Make device as a host-managed zoned block device. Default: false (bool)\nparm:           zone_size:Zone size in MB when block device is zoned. Must be power-of-two: Default: 256 (ulong)\nparm:           zone_capacity:Zone capacity in MB when block device is zoned. Can be less than or equal to zone size. Default: Zone size (ulong)\nparm:           zone_nr_conv:Number of conventional zones when block device is zoned. Default: 0 (uint)\nparm:           zone_max_open:Maximum number of open zones when block device is zoned. Default: 0 (no limit) (uint)\nparm:           zone_max_active:Maximum number of active zones when block device is zoned. Default: 0 (no limit) (uint)\n")),(0,o.kt)("p",null,"The parameters that are related to zoned-device emulation are shown in\nthe table below."),(0,o.kt)("center",null,(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Argument"),(0,o.kt)("th",{parentName:"tr",align:null},"Value"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"zoned"),(0,o.kt)("td",{parentName:"tr",align:null},"0 or 1"),(0,o.kt)("td",{parentName:"tr",align:null},"Disable or enable zoned mode (default: disabled)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"zone_size"),(0,o.kt)("td",{parentName:"tr",align:null},"zone size in MiB"),(0,o.kt)("td",{parentName:"tr",align:null},"The size of each zone (default: 256)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"zone_capacity"),(0,o.kt)("td",{parentName:"tr",align:null},"zone capacity in MiB"),(0,o.kt)("td",{parentName:"tr",align:null},"The capacity of each zone (default: zone size)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"zone_nr_conv"),(0,o.kt)("td",{parentName:"tr",align:null},"number"),(0,o.kt)("td",{parentName:"tr",align:null},"Number of conventional zones (default: 0)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"zone_max_open"),(0,o.kt)("td",{parentName:"tr",align:null},"number"),(0,o.kt)("td",{parentName:"tr",align:null},"Maximum number of open zones (default: 0, meaning no limit)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"zone_max_active"),(0,o.kt)("td",{parentName:"tr",align:null},"number"),(0,o.kt)("td",{parentName:"tr",align:null},"Maximum number of active zones (default: 0, meaning no limit)"))))),(0,o.kt)("h2",{id:"creating-a-null_blk-zoned-block-device--more-advanced-cases-configfs"},"Creating a ",(0,o.kt)("em",{parentName:"h2"},"null_blk")," Zoned Block Device ","\u2014"," More Advanced Cases (configfs)"),(0,o.kt)("p",null,"To create an emulated zoned block device with ",(0,o.kt)("em",{parentName:"p"},"null_blk"),", as shown above, the\n",(0,o.kt)("em",{parentName:"p"},"modprobe")," command can be used. Additional parameters can be passed to this\ncommand to configure the emulated disk."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-plaintext"},"# modprobe null_blk nr_devices=1 \\\n    zoned=1 \\\n    zone_nr_conv=4 \\\n    zone_size=64 \\\n")),(0,o.kt)("p",null,"In this example, the arguments mean the following:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"nr_devices=1")," means that only one (1) device will be created."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"zoned=1")," means that all devices that are created will be zoned devices."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"zone_nr_conv=4")," sets the number of conventional zones to four (4)."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"zone_size=64")," sets the size of each zone to sixty-four (64) megabytes.")),(0,o.kt)("p",null,"The ",(0,o.kt)("em",{parentName:"p"},"configfs")," interface of the ",(0,o.kt)("em",{parentName:"p"},"null_blk")," driver provides a more powerful\nmethod for creating emulated zoned block devices. The ",(0,o.kt)("em",{parentName:"p"},"configfs")," parameters\nof the ",(0,o.kt)("em",{parentName:"p"},"null_blk")," driver can be listed by running the following commands:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-plaintext"},"# modprobe null_blk nr_devices=0\n\n# cat /sys/kernel/config/nullb/features\nmemory_backed,discard,bandwidth,cache,badblocks,zoned,zone_size,zone_capacity,zone_nr_conv,zone_max_open,zone_max_active\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("em",{parentName:"p"},"configfs")," interface can be used to script the creation of emulated zoned\nblock devices with different zone configurations. An example is provided below."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\n\nif [ $# != 4 ]; then\n        echo "Usage: $0 <sect size (B)> <zone size (MB)> <nr conv zones> <nr seq zones>"\n        exit 1\nfi\n\nscriptdir=$(cd $(dirname "$0") && pwd)\n\nmodprobe null_blk nr_devices=0 || return $?\n\nfunction create_zoned_nullb()\n{\n        local nid=0\n        local bs=$1\n        local zs=$2\n        local nr_conv=$3\n        local nr_seq=$4\n\n        cap=$(( zs * (nr_conv + nr_seq) ))\n\n        while [ 1 ]; do\n                if [ ! -b "/dev/nullb$nid" ]; then\n                        break\n                fi\n                nid=$(( nid + 1 ))\n        done\n\n        dev="/sys/kernel/config/nullb/nullb$nid"\n        mkdir "$dev"\n\n        echo $bs > "$dev"/blocksize\n        echo 0 > "$dev"/completion_nsec\n        echo 0 > "$dev"/irqmode\n        echo 2 > "$dev"/queue_mode\n        echo 1024 > "$dev"/hw_queue_depth\n        echo 1 > "$dev"/memory_backed\n        echo 1 > "$dev"/zoned\n\n        echo $cap > "$dev"/size\n        echo $zs > "$dev"/zone_size\n        echo $nr_conv > "$dev"/zone_nr_conv\n\n        echo 1 > "$dev"/power\n\n        echo mq-deadline > /sys/block/nullb$nid/queue/scheduler\n\n        echo "$nid"\n}\n\nnulldev=$(create_zoned_nullb $1 $2 $3 $4)\necho "Created /dev/nullb$nulldev"\n')),(0,o.kt)("p",null,"This script (",(0,o.kt)("em",{parentName:"p"},"nullblk-zoned.sh"),") takes four arguments:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"the sector size in bytes of the emulated device"),(0,o.kt)("li",{parentName:"ol"},"the device zone size in MiB"),(0,o.kt)("li",{parentName:"ol"},"the number of conventional zones (which can be 0)"),(0,o.kt)("li",{parentName:"ol"},"the number of sequential write required zones.")),(0,o.kt)("p",null,"Memory-backing for written sectors can be turned on with this script\n(memory_backed=1). This enables run-time persistence of the data written to\nthe sectors of the emulated device. The writen data is lost when the emulated\ndevice is destroyed."),(0,o.kt)("p",null,"For example, a small zoned device with 4 conventional zones and 8 sequential\nwrite required zones of 64 MiB can be created with the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-plaintext"},"# nullblk-zoned.sh 4096 64 4 8\nCreated /dev/nullb0\n# blkzone report /dev/nullb0 \n  start: 0x000000000, len 0x020000, cap 0x020000, wptr 0x000000 reset:0 non-seq:0, zcond: 0(nw) [type: 1(CONVENTIONAL)]\n  start: 0x000020000, len 0x020000, cap 0x020000, wptr 0x000000 reset:0 non-seq:0, zcond: 0(nw) [type: 1(CONVENTIONAL)]\n  start: 0x000040000, len 0x020000, cap 0x020000, wptr 0x000000 reset:0 non-seq:0, zcond: 0(nw) [type: 1(CONVENTIONAL)]\n  start: 0x000060000, len 0x020000, cap 0x020000, wptr 0x000000 reset:0 non-seq:0, zcond: 0(nw) [type: 1(CONVENTIONAL)]\n  start: 0x000080000, len 0x020000, cap 0x020000, wptr 0x000000 reset:0 non-seq:0, zcond: 1(em) [type: 2(SEQ_WRITE_REQUIRED)]\n  start: 0x0000a0000, len 0x020000, cap 0x020000, wptr 0x000000 reset:0 non-seq:0, zcond: 1(em) [type: 2(SEQ_WRITE_REQUIRED)]\n  start: 0x0000c0000, len 0x020000, cap 0x020000, wptr 0x000000 reset:0 non-seq:0, zcond: 1(em) [type: 2(SEQ_WRITE_REQUIRED)]\n  start: 0x0000e0000, len 0x020000, cap 0x020000, wptr 0x000000 reset:0 non-seq:0, zcond: 1(em) [type: 2(SEQ_WRITE_REQUIRED)]\n  start: 0x000100000, len 0x020000, cap 0x020000, wptr 0x000000 reset:0 non-seq:0, zcond: 1(em) [type: 2(SEQ_WRITE_REQUIRED)]\n...\n  start: 0x000820000, len 0x020000, cap 0x020000, wptr 0x000000 reset:0 non-seq:0, zcond: 1(em) [type: 2(SEQ_WRITE_REQUIRED)]\n  start: 0x000840000, len 0x020000, cap 0x020000, wptr 0x000000 reset:0 non-seq:0, zcond: 1(em) [type: 2(SEQ_WRITE_REQUIRED)]\n  start: 0x000860000, len 0x020000, cap 0x020000, wptr 0x000000 reset:0 non-seq:0, zcond: 1(em) [type: 2(SEQ_WRITE_REQUIRED)]\n")),(0,o.kt)("h2",{id:"deleting-a-null_blk-zoned-block-device"},"Deleting a ",(0,o.kt)("em",{parentName:"h2"},"null_blk")," Zoned Block Device"),(0,o.kt)("p",null,"There are two ways to delete ",(0,o.kt)("em",{parentName:"p"},"null_blk")," zoned block devices. One way is used to\ndelete ",(0,o.kt)("em",{parentName:"p"},"null_blk")," zoned block devices that were created using ",(0,o.kt)("em",{parentName:"p"},"modprobe")," and\nthe other way is used to delete ",(0,o.kt)("em",{parentName:"p"},"null_blk")," zoned block devices that were\ncreated using ",(0,o.kt)("em",{parentName:"p"},"configfs"),"."),(0,o.kt)("h3",{id:"deleting-zbd-that-were-created-with-modprobe"},"Deleting ZBD that were created with modprobe"),(0,o.kt)("p",null,"Emulated devices created by using ",(0,o.kt)("em",{parentName:"p"},"modprobe")," (and not created using ",(0,o.kt)("em",{parentName:"p"},"configfs"),")\ncan be deleted by removing the ",(0,o.kt)("em",{parentName:"p"},"null_blk")," kernel module:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-plaintext"},"# rmmod null_blk\n")),(0,o.kt)("p",null,"This command will not delete emulated devices that were created through the\n",(0,o.kt)("em",{parentName:"p"},"configfs")," interface."),(0,o.kt)("h3",{id:"deleting-zbd-that-were-created-with-configfs"},"Deleting ZBD that were created with configfs"),(0,o.kt)("p",null,"The following script is the counterpart of the zoned block device creation\nscript shown above. It can be used to destroy ",(0,o.kt)("em",{parentName:"p"},"null_blk")," devices created\nthrough ",(0,o.kt)("em",{parentName:"p"},"configfs"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\n\nif [ $# != 1 ]; then\n    echo "Usage: $0 <nullb ID>"\n    exit 1\nfi\n\nnid=$1\n\nif [ ! -b "/dev/nullb$nid" ]; then\n    echo "/dev/nullb$nid: No such device"\n    exit 1\nfi\n\necho 0 > /sys/kernel/config/nullb/nullb$nid/power\nrmdir /sys/kernel/config/nullb/nullb$nid\n\necho "Destroyed /dev/nullb$nid"\n')),(0,o.kt)("h2",{id:"emulating-smr-hdd"},"Emulating SMR HDD"),(0,o.kt)("p",null,"The ",(0,o.kt)("em",{parentName:"p"},"nullblk-zoned.sh")," script makes it possible to create zoned block\ndevices that correspond to a possible configuration of an SMR hard\ndisk, with no limit on the maximum number of open zones. This script\ncan be modified to add a limit to the number of open zones on the\nemulated device (the ",(0,o.kt)("em",{parentName:"p"},"zone_max_open")," parameter controls this), to more\nfaithfully emulate an SMR HDD's characteristics."),(0,o.kt)("p",null,"The ",(0,o.kt)("em",{parentName:"p"},"zone_capacity")," and ",(0,o.kt)("em",{parentName:"p"},"zone_max_active")," parameters should not be\nused when the emulated device is meant to mimic the characteristics of\nan SMR hard disk."),(0,o.kt)("h2",{id:"emulating-nvme-zns-ssd"},"Emulating NVMe ZNS SSD"),(0,o.kt)("p",null,"The ",(0,o.kt)("em",{parentName:"p"},"zone_capacity")," and ",(0,o.kt)("em",{parentName:"p"},"zone_max_active")," parameters make it possible to\ncreate an emulated zoned block device that mimics the characteristics of a\nNVMe Zoned Namespace SSD. The ",(0,o.kt)("em",{parentName:"p"},"zone_capacity")," parameter is used to specify\nthe number of sectors in each zone that can be read and written. The\n",(0,o.kt)("em",{parentName:"p"},"zone_max_active")," argument is used to specify a limit on the number of\nzones that can be in the closed state, the implicit-open state, or the\nexplicit-open state."))}u.isMDXComponent=!0}}]);