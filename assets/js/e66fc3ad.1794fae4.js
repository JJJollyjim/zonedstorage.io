"use strict";(self.webpackChunkzonedstorage_io=self.webpackChunkzonedstorage_io||[]).push([[2905],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var s=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,s,a=function(e,t){if(null==e)return{};var n,s,a={},i=Object.keys(e);for(s=0;s<i.length;s++)n=i[s],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(s=0;s<i.length;s++)n=i[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=s.createContext({}),c=function(e){var t=s.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return s.createElement(l.Provider,{value:t},e.children)},d="mdxType",b={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},m=s.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,u=d["".concat(l,".").concat(m)]||d[m]||b[m]||i;return n?s.createElement(u,r(r({ref:t},p),{},{components:n})):s.createElement(u,r({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[d]="string"==typeof e?e:a,r[1]=o;for(var c=2;c<i;c++)r[c]=n[c];return s.createElement.apply(null,r)}return s.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3552:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var s=n(7462),a=(n(7294),n(3905));const i={id:"zenfs",title:"RocksDB with ZenFS",sidebar_label:"RocksDB with ZenFS"},r="RocksDB with ZenFS",o={unversionedId:"applications/zenfs",id:"applications/zenfs",title:"RocksDB with ZenFS",description:"RocksDB is a persistent",source:"@site/docs/applications/zenfs.md",sourceDirName:"applications",slug:"/applications/zenfs",permalink:"/docs/applications/zenfs",draft:!1,tags:[],version:"current",frontMatter:{id:"zenfs",title:"RocksDB with ZenFS",sidebar_label:"RocksDB with ZenFS"},sidebar:"docs",previous:{title:"Percona Server for MySQL",permalink:"/docs/applications/percona-server"},next:{title:"Overview",permalink:"/docs/tools"}},l={},c=[{value:"Getting Started",id:"getting-started",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Building and Installing ZenFS",id:"building-and-installing-zenfs",level:3},{value:"ZenFS Command Line",id:"zenfs-command-line",level:3},{value:"Create a ZenFS file system",id:"create-a-zenfs-file-system",level:4},{value:"List files within a ZenFS file system",id:"list-files-within-a-zenfs-file-system",level:4},{value:"Back up files within a ZenFS file system",id:"back-up-files-within-a-zenfs-file-system",level:4},{value:"Restore files within a ZenFS file system",id:"restore-files-within-a-zenfs-file-system",level:4},{value:"Benchmarking",id:"benchmarking",level:3}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,s.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"rocksdb-with-zenfs"},"RocksDB with ZenFS"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},(0,a.kt)("a",{href:"https://rocksdb.org/",target:"_blank"},"RocksDB"))," is a persistent\nkey-value store for fast storage devices. It is implemented using a ",(0,a.kt)("a",{href:"https://en.wikipedia.org/wiki/Log-structured_merge-tree",target:"_blank"},"\nLog-Structured Merge-Tree (LSM-tree)")," data structure.  It is simlilar to\nLSM-tree based key-value engine implementations: values are stored in tables\nthat are sorted in increasing key order. Tables are sequentially written and\nnever modified.  This basic principle of the LSM-tree data structure makes it\npossible to support zoned block devices."),(0,a.kt)("p",null,"The storage plugin architecture of RocksDB makes it possible to accommodate\ndifferent storage backends. More to the point, ZenFS implements support for\nzoned block devices and is integrated into RocksDB."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},(0,a.kt)("a",{href:"https://github.com/westerndigitalcorporation/zenfs",target:"_blank"},"\nZenFS"))," is a file system plugin for ",(0,a.kt)("em",{parentName:"p"},"RocksDB")," that uses the ",(0,a.kt)("em",{parentName:"p"},"RocksDB"),"\nFileSystem ","[sic]",' interface to place files into zones on a raw zoned block\ndevice. By separating files into zones and utilizing "write lifetime hints"\n(WLTH) to co-locate data of similar lifetimes, ',(0,a.kt)("em",{parentName:"p"},"ZenFS")," can reduce system write\namplification as compared to regular file systems on conventional block\ndevices. ",(0,a.kt)("em",{parentName:"p"},"ZenFS")," ensures that there is no background garbage collection in the\nfile system or on the device, which improves performance in terms of\nthroughput, tail latencies and endurance."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"ZenFS")," can store multiple files in a single zone by using an extent allocation\nscheme. A file can be composed of one or more extents and all the extents that\ncompose that file can be stored in the same zone (or in different zones) of the\ndevice. An extent never spans multiple zones. When all file extents in a zone\nare invalidated, the zone can be reset and then reused to store new file\nextents."),(0,a.kt)("p",null,"ZenFS places file extents into zones based on write lifetime hints (WLTH)\nprovided by RocksDB library. ZenFS always attempts to place file extents\ntogether in the same zones when they have similar WLTH."),(0,a.kt)("p",null,"In ",(0,a.kt)("em",{parentName:"p"},"ZenFS"),", data garbage collection is performed only by RocksDB when it\ninitiates the LSM-tree table compaction process. No garbage collection is\nexecuted by ZenFS and no garbage collection is executed by the ZNS device\ncontroller."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Further information is available in\nthe ",(0,a.kt)("a",{href:"https://www.usenix.org/conference/atc21/presentation/bjorling",target:"_blank"}," ZNS: Avoiding the Block Interface Tax for Flash-based SSDs "),"\nUSENIX ATC 2021 article.")),(0,a.kt)("h2",{id:"getting-started"},"Getting Started"),(0,a.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"ZenFS")," requires Linux kernel version 5.9 or newer. The kernel used must\nbe configured with\n",(0,a.kt)("a",{parentName:"p",href:"../linux/config"},"zoned block device support enabled"),"."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"ZenFS")," uses the ",(0,a.kt)("a",{parentName:"p",href:"../tools/libzbd"},(0,a.kt)("em",{parentName:"a"},"libzbd"))," library. The latest version\nof this library must be compiled and installed prior to building and\ninstalling ",(0,a.kt)("em",{parentName:"p"},"ZenFS"),"."),(0,a.kt)("h3",{id:"building-and-installing-zenfs"},"Building and Installing ZenFS"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"ZenFS")," is embedded into RocksDB. It is available as a submodule in RocksDB\nand must be explicitly enabled when compiling RocksDB."),(0,a.kt)("p",null,"Instructions that explain how to compile and install RocksDB with ",(0,a.kt)("em",{parentName:"p"},"ZenFS")," are\nmaintained in the ",(0,a.kt)("em",{parentName:"p"},"ZenFS")," project ",(0,a.kt)("a",{href:"https://github.com/westerndigitalcorporation/zenfs/blob/master/README.md",target:"_blank"}," README file"),"."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},'Remember to set the block device IO scheduler to "deadline" to prevent write\noperations from being reordered. This can be done automatically on system\nboot using a ',(0,a.kt)("a",{parentName:"p",href:"../linux/sched"},(0,a.kt)("em",{parentName:"a"},"udev")," rule"),".")),(0,a.kt)("h3",{id:"zenfs-command-line"},"ZenFS Command Line"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"ZenFS")," provides a command line utility called ",(0,a.kt)("em",{parentName:"p"},"zenfs"),". This utility is used to\nformat the zoned device to create a new filesystem, to list the files, and to\nback up and restore the filesystem."),(0,a.kt)("h4",{id:"create-a-zenfs-file-system"},"Create a ZenFS file system"),(0,a.kt)("p",null,"To create or format a zoned block device (e.g., NVMe ZNS device ",(0,a.kt)("inlineCode",{parentName:"p"},"/dev/nvme0n1"),"),\nuse the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-plaintext"},"zenfs mkfs --zbd=nvme0n1 --aux_path=/tmp/zone-aux --force\n\n# Output example\nZenFS file system created. Free space: 220246 MB\n")),(0,a.kt)("h4",{id:"list-files-within-a-zenfs-file-system"},"List files within a ZenFS file system"),(0,a.kt)("p",null,"After the zoned block device has been formatted, ",(0,a.kt)("em",{parentName:"p"},"RocksDB")," manages its files\nthrough ",(0,a.kt)("em",{parentName:"p"},"ZenFS"),". To list the files present on the zoned block device, use the\nfollowing command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-plaintext"},"zenfs list --zbd=nvme0n1 --path=rocksdbtest/dbbench\n\n# Output example:\n           0    Jul 20 2021 18:13:52            LOCK\n       66979    Jul 20 2021 18:14:01            LOG\n    26961453    Jul 20 2021 18:13:55            000014.sst\n    26961524    Jul 20 2021 18:13:55            000015.sst\n    26961904    Jul 20 2021 18:13:55            000016.sst\n    26963148    Jul 20 2021 18:13:55            000017.sst\n   102734225    Jul 20 2021 18:13:56            000019.sst\n    26962608    Jul 20 2021 18:13:55            000020.sst\n    26961566    Jul 20 2021 18:13:56            000021.sst\n    26963214    Jul 20 2021 18:13:56            000022.sst\n    26963380    Jul 20 2021 18:13:57            000023.sst\n   102594916    Jul 20 2021 18:13:58            000025.sst\n    26546055    Jul 20 2021 18:13:59            000026.sst\n   102540090    Jul 20 2021 18:14:00            000028.sst\n   190808702    Jul 20 2021 18:14:01            000029.log\n   102826791    Jul 20 2021 18:14:00            000030.sst\n          16    Jul 20 2021 18:13:52            CURRENT\n          37    Jul 20 2021 18:13:52            IDENTITY\n        1586    Jul 20 2021 18:14:01            MANIFEST-000004\n        6178    Jul 20 2021 18:13:52            OPTIONS-000007\n")),(0,a.kt)("h4",{id:"back-up-files-within-a-zenfs-file-system"},"Back up files within a ZenFS file system"),(0,a.kt)("p",null,"To back up all table and metadata files within a ",(0,a.kt)("em",{parentName:"p"},"ZenFS")," file system to a local\nfilesystem, use the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-plaintext"},"zenfs backup --zbd=nvme0n1 --path=/tmp/backup\n\n# Output example\nrocksdbtest/dbbench/LOCK\nrocksdbtest/dbbench/LOG\nrocksdbtest/dbbench/000014.sst\nrocksdbtest/dbbench/000015.sst\nrocksdbtest/dbbench/000016.sst\nrocksdbtest/dbbench/000017.sst\nrocksdbtest/dbbench/000019.sst\nrocksdbtest/dbbench/000020.sst\nrocksdbtest/dbbench/000021.sst\nrocksdbtest/dbbench/000022.sst\nrocksdbtest/dbbench/000023.sst\nrocksdbtest/dbbench/000025.sst\nrocksdbtest/dbbench/000026.sst\nrocksdbtest/dbbench/000028.sst\nrocksdbtest/dbbench/000029.log\nrocksdbtest/dbbench/000030.sst\nrocksdbtest/dbbench/CURRENT\nrocksdbtest/dbbench/IDENTITY\nrocksdbtest/dbbench/MANIFEST-000004\nrocksdbtest/dbbench/OPTIONS-000007\n")),(0,a.kt)("h4",{id:"restore-files-within-a-zenfs-file-system"},"Restore files within a ZenFS file system"),(0,a.kt)("p",null,"To restore files from a previous backup, use the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-plaintext"},"zenfs restore --zbd=nvme0n1 --path=/tmp/backup/rocksdbtest/dbbench/ \\\n        --restore_path=rocksdbtest/dbbench\n\n# Output example\n/tmp/backup/rocksdbtest/dbbench/CURRENT\n/tmp/backup/rocksdbtest/dbbench/LOCK\n/tmp/backup/rocksdbtest/dbbench/000015.sst\n/tmp/backup/rocksdbtest/dbbench/000022.sst\n/tmp/backup/rocksdbtest/dbbench/LOG\n/tmp/backup/rocksdbtest/dbbench/MANIFEST-000004\n/tmp/backup/rocksdbtest/dbbench/000023.sst\n/tmp/backup/rocksdbtest/dbbench/000028.sst\n/tmp/backup/rocksdbtest/dbbench/000025.sst\n/tmp/backup/rocksdbtest/dbbench/000030.sst\n/tmp/backup/rocksdbtest/dbbench/IDENTITY\n/tmp/backup/rocksdbtest/dbbench/OPTIONS-000007\n/tmp/backup/rocksdbtest/dbbench/000020.sst\n/tmp/backup/rocksdbtest/dbbench/000019.sst\n/tmp/backup/rocksdbtest/dbbench/000016.sst\n/tmp/backup/rocksdbtest/dbbench/000014.sst\n/tmp/backup/rocksdbtest/dbbench/000026.sst\n/tmp/backup/rocksdbtest/dbbench/000029.log\n/tmp/backup/rocksdbtest/dbbench/000021.sst\n/tmp/backup/rocksdbtest/dbbench/000017.sst\n")),(0,a.kt)("h3",{id:"benchmarking"},"Benchmarking"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"RocksDB")," provides the ",(0,a.kt)("em",{parentName:"p"},"db_bench")," utility to test and benchmark the performance\nof a device. The following command provides an example of ",(0,a.kt)("em",{parentName:"p"},"db_bench")," execution,\nusing a zoned block device that has been formatted with ",(0,a.kt)("em",{parentName:"p"},"ZenFS"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-plaintext"},"db_bench --fs_uri=zenfs://dev:nvme0n1 --benchmarks=fillrandom \\\n       --use_direct_reads --key_size=16 --value_size=800 \\\n       --target_file_size_base=2147483648 \\\n       --use_direct_io_for_flush_and_compaction \\\n       --max_bytes_for_level_multiplier=4 --write_buffer_size=2147483648 \\\n       --target_file_size_multiplier=1 --num=1000000 --threads=2 \\\n       --max_background_jobs=4\n\n# Output example\nInitializing RocksDB Options from the specified file\nInitializing RocksDB Options from command-line flags\nRocksDB:    version 6.21\nDate:       Tue Jul 20 20:24:56 2021\nCPU:        32 * AMD EPYC 7302P 16-Core Processor\nCPUCache:   512 KB\nKeys:       16 bytes each (+ 0 bytes user-defined timestamp)\nValues:     800 bytes each (400 bytes after compression)\nEntries:    1000000\nPrefix:    0 bytes\nKeys per prefix:    0\nRawSize:    778.2 MB (estimated)\nFileSize:   396.7 MB (estimated)\nWrite rate: 0 bytes/second\nRead rate: 0 ops/second\nCompression: Snappy\nCompression sampling rate: 0\nMemtablerep: skip_list\nPerf Level: 1\n------------------------------------------------\nInitializing RocksDB Options from the specified file\nInitializing RocksDB Options from command-line flags\nDB path: [rocksdbtest/dbbench]\nfillrandom   :      10.447 micros/op 191441 ops/sec;  149.0 MB/s\n")))}d.isMDXComponent=!0}}]);