"use strict";(self.webpackChunkzonedstorage_io=self.webpackChunkzonedstorage_io||[]).push([[929],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return u}});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var d=a.createContext({}),c=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},l=function(e){var t=c(e.components);return a.createElement(d.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,d=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),m=c(n),u=s,k=m["".concat(d,".").concat(u)]||m[u]||p[u]||o;return n?a.createElement(k,r(r({ref:t},l),{},{components:n})):a.createElement(k,r({ref:t},l))}));function u(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,r=new Array(o);r[0]=m;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i.mdxType="string"==typeof e?e:s,r[1]=i;for(var c=2;c<o;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},445:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return d},toc:function(){return c},default:function(){return p}});var a=n(7462),s=n(3366),o=(n(7294),n(3905)),r=["components"],i={id:"smr-emulation",title:"Getting Started with Emulated SMR Hard-Disks",sidebar_label:"Getting Started with Emulated SMR Hard-Disks"},d={unversionedId:"getting-started/smr-emulation",id:"getting-started/smr-emulation",isDocsHomePage:!1,title:"Getting Started with Emulated SMR Hard-Disks",description:"Emulated ZBC disks make it possible to do application development and kernel",source:"@site/docs/getting-started/smr-emulation.md",sourceDirName:"getting-started",slug:"/getting-started/smr-emulation",permalink:"/zonedstorage.io/docs/getting-started/smr-emulation",version:"current",sidebar_label:"Getting Started with Emulated SMR Hard-Disks",frontMatter:{id:"smr-emulation",title:"Getting Started with Emulated SMR Hard-Disks",sidebar_label:"Getting Started with Emulated SMR Hard-Disks"},sidebar:"docs",previous:{title:"Getting Started with SMR Hard-Disks",permalink:"/zonedstorage.io/docs/getting-started/smr-disk"},next:{title:"Getting Started with Emulated NVMe ZNS Devices",permalink:"/zonedstorage.io/docs/getting-started/zns-emulation"}},c=[{value:"<em>tcmu-runner</em>",id:"tcmu-runner",children:[{value:"tcmu-runner ZBC File Handler",id:"tcmu-runner-zbc-file-handler",children:[]},{value:"Verifying The Emulated Disk",id:"verifying-the-emulated-disk",children:[]}]},{value:"<em>scsi_debug</em>",id:"scsi_debug",children:[{value:"Creating an Emulated ZBC Disk",id:"creating-an-emulated-zbc-disk",children:[]},{value:"Verifying The Emulated Disk",id:"verifying-the-emulated-disk-1",children:[]}]}],l={toc:c};function p(e){var t=e.components,n=(0,s.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Emulated ZBC disks make it possible to do application development and kernel\ntests even if you do not have access to ZBC or ZAC disks. There are several\nways to do this."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"null_blk")),": The ",(0,o.kt)("em",{parentName:"p"},"null_blk")," kernel driver makes it possible to emulate\nzoned block devices.  This method is discussed in more detail in the\n",(0,o.kt)("a",{parentName:"p",href:"/zonedstorage.io/docs/getting-started/nullblk"},"Zoned Block Device Emulation with null_blk")," chapter of the\nGetting Started Guide.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"tcmu-runner")),": This scsi device emulation application makes it possible\nto use a regular file (as a storage backstore) to emulate both host-aware and\nhost-managed ZBC SCSI disks. The disks created using ",(0,o.kt)("em",{parentName:"p"},"tcmu-runner")," function\nlike physical disks.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"scsi_debug")),": The ",(0,o.kt)("em",{parentName:"p"},"scsi_debug")," kernel driver can be configured to emulate\nhost-aware and host-managed ZBC disks that appear to the kernel and\napplication exactly as a real disk would."))),(0,o.kt)("h2",{id:"tcmu-runner"},(0,o.kt)("em",{parentName:"h2"},"tcmu-runner")),(0,o.kt)("p",null,"Detailed information on how to install and operate ",(0,o.kt)("em",{parentName:"p"},"tcmu-runner")," can be found\nin the ",(0,o.kt)("a",{parentName:"p",href:"/zonedstorage.io/docs/tools/tcmu-runner"},"tcmu-runner ZBC Disk Emulation")," chapter of\nthe ",(0,o.kt)("a",{parentName:"p",href:"/zonedstorage.io/docs/tools"},"Tools and Libraries")," Guide."),(0,o.kt)("h3",{id:"tcmu-runner-zbc-file-handler"},"tcmu-runner ZBC File Handler"),(0,o.kt)("p",null,"The ",(0,o.kt)("em",{parentName:"p"},"ZBC file handler")," is an internal device handler of ",(0,o.kt)("em",{parentName:"p"},"tcmu-runner")," that\nemulates a ZBC SCSI disk and uses a file as a backstore. The ",(0,o.kt)("em",{parentName:"p"},"tcmu-runner"),"\ninfrastructure connects the emulated disk to a virtual HBA that has been\nimplemented as a kernel driver. This structure provides a command path for the\nemulated disk that is identical to the command path that would be available if a\nphysical disk were in its place. Applications and kernel components will not\nperceive any difference."),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"/zonedstorage.io/docs/tools/tcmu-runner"},"tcmu-runner ZBC Disk Emulation")," chapter of the\n",(0,o.kt)("a",{parentName:"p",href:"/zonedstorage.io/docs/tools"},"Tools and Libraries")," guide describes in more\ndetail the options available for creating emulated disks. These include the disk\nzone model, the disk zone size, the disk capacity, and the number of\nconventional zones of the disk."),(0,o.kt)("p",null,"The following example shows how to create a small (20 GB) host-managed ZBC disk\nthat has 10 conventional zones and a 256 MiB zone size. In this example, the\nemulated disk capacity is stored in the file ",(0,o.kt)("em",{parentName:"p"},"/var/local/zbc0.raw"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-plaintext"},"# targetcli\ntargetcli shell version 2.1.fb49\nCopyright 2011-2013 by Datera, Inc and others.\nFor help on commands, type 'help'.\n\n/> cd /backstores/user:zbc\n/backstores/user:zbc> create name=zbc0 size=20G cfgstring=model-HM/zsize-256/conv-10@/var/local/zbc0.raw\nCreated user-backed storage object zbc0 size 21474836480.\n/backstores/user:zbc> cd /loopback\n/loopback> create\nCreated target naa.500140529100d742.\n/loopback> cd naa.500140529100d742/luns\n/loopback/naa...9100d742/luns> create /backstores/user:zbc/zbc0 0\nCreated LUN 0.\n/loopback/naa...9100d742/luns> cd /\n/> ls\no- / ..................................................................... [...]\n  o- backstores .......................................................... [...]\n  | o- block .............................................. [Storage Objects: 0]\n  | o- fileio ............................................. [Storage Objects: 0]\n  | o- pscsi .............................................. [Storage Objects: 0]\n  | o- ramdisk ............................................ [Storage Objects: 0]\n  | o- user:fbo ........................................... [Storage Objects: 0]\n  | o- user:poma .......................................... [Storage Objects: 0]\n  | o- user:zbc ........................................... [Storage Objects: 1]\n  |   o- zbc0  [model-HM/zsize-256/conv-10@/var/local/zbc0.raw (20.0GiB) activated]\n  |     o- alua ............................................... [ALUA Groups: 1]\n  |       o- default_tg_pt_gp ................... [ALUA state: Active/optimized]\n  o- iscsi ........................................................ [Targets: 0]\n  o- loopback ..................................................... [Targets: 1]\n  | o- naa.500140529100d742 ............................. [naa.50014059e05d5424]\n  |   o- luns ........................................................ [LUNs: 1]\n  |     o- lun0 ................................. [user/zbc0 (default_tg_pt_gp)]\n  o- vhost ........................................................ [Targets: 0]\n/> exit\n")),(0,o.kt)("h3",{id:"verifying-the-emulated-disk"},"Verifying The Emulated Disk"),(0,o.kt)("p",null,"You can verify that the emulated disk has been identified and initialized by\nthe kernel in the same way that you verify the kernel identification and\ninitialization of Serial ATA disks and SAS disks, as discussed in the ",(0,o.kt)("a",{parentName:"p",href:"/zonedstorage.io/docs/getting-started/smr-disk"},"Getting\nstarted with an SMR disk")," chapter."),(0,o.kt)("p",null,"Identify the emulated disk by looking at the disk vendor ID that is displayed\nby the ",(0,o.kt)("em",{parentName:"p"},"lsscsi")," utility:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-plaintext"},"# lsscsi -g\n[2:0:0:0]    disk    ATA      INTEL SSDSC2CT18 335u  /dev/sda   /dev/sg0\n[5:0:0:0]    zbc     ATA      HGST HSH721415AL T220  /dev/sdb   /dev/sg1\n[11:0:1:0]   zbc     LIO-ORG  TCMU ZBC device  0002  /dev/sdc   /dev/sg2\n")),(0,o.kt)("p",null,'In this example, the emulated disk is listed with the device vendor name\n"LIO-ORG" and the device model name is "TCMU ZBC device".'),(0,o.kt)("p",null,"As with physical ZBC and ZAC disks, the kernel messages will show that the\ndrive has been identified and initialized:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-plaintext"},"# dmesg\n...\nscsi host11: TCM_Loopback\nscsi 11:0:1:0: Direct-Access-ZBC LIO-ORG  TCMU ZBC device  0002 PQ: 0 ANSI: 5\nsd 11:0:1:0: Attached scsi generic sg2 type 20\nsd 11:0:1:0: [sdc] Host-managed zoned block device\nsd 11:0:1:0: [sdc] 41943040 512-byte logical blocks: (21.5 GB/20.0 GiB)\nsd 11:0:1:0: [sdc] 80 zones of 524288 logical blocks\nsd 11:0:1:0: [sdc] Write Protect is off\nsd 11:0:1:0: [sdc] Mode Sense: 0f 00 00 00\nsd 11:0:1:0: [sdc] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA\nsd 11:0:1:0: [sdc] Optimal transfer size 65536 bytes\nsd 11:0:1:0: [sdc] Attached SCSI disk\n\n...\n")),(0,o.kt)("p",null,'The kernel identifies the emulated disk in the same way that it would identify\na physical SAS host managed disk (that is, with the device type\n"',(0,o.kt)("em",{parentName:"p"},"Direct-Access-ZBC"),'").'),(0,o.kt)("p",null,"The emulated disk can now be used in the same manner as any physical disk. For\ninstance, the ",(0,o.kt)("em",{parentName:"p"},"blkzone")," or ",(0,o.kt)("em",{parentName:"p"},"zbc_report_zones")," utilities can be used to inspect\nthe disk zone configuration:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-plaintext"},"# zbc_report_zones /dev/sdc\nDevice /dev/sdc:\n    Vendor ID: LIO-ORG TCMU ZBC device 0002\n    Zoned block device interface, Host-managed zone model\n    41943040 512-bytes sectors\n    41943040 logical blocks of 512 B\n    41943040 physical blocks of 512 B\n    21.475 GB capacity\n    Read commands are unrestricted\n    Maximum number of open sequential write required zones: 35\n    80 zones from 0, reporting option 0x00\n80 / 80 zones:\nZone 00000: type 0x1 (Conventional), cond 0x0 (Not-write-pointer), sector 0, 524288 sectors\nZone 00001: type 0x1 (Conventional), cond 0x0 (Not-write-pointer), sector 524288, 524288 sectors\nZone 00002: type 0x1 (Conventional), cond 0x0 (Not-write-pointer), sector 1048576, 524288 sectors\nZone 00003: type 0x1 (Conventional), cond 0x0 (Not-write-pointer), sector 1572864, 524288 sectors\nZone 00004: type 0x1 (Conventional), cond 0x0 (Not-write-pointer), sector 2097152, 524288 sectors\nZone 00005: type 0x1 (Conventional), cond 0x0 (Not-write-pointer), sector 2621440, 524288 sectors\nZone 00006: type 0x1 (Conventional), cond 0x0 (Not-write-pointer), sector 3145728, 524288 sectors\nZone 00007: type 0x1 (Conventional), cond 0x0 (Not-write-pointer), sector 3670016, 524288 sectors\nZone 00008: type 0x1 (Conventional), cond 0x0 (Not-write-pointer), sector 4194304, 524288 sectors\nZone 00009: type 0x1 (Conventional), cond 0x0 (Not-write-pointer), sector 4718592, 524288 sectors\nZone 00010: type 0x2 (Sequential-write-required), cond 0x1 (Empty), reset recommended 0, non_seq 0, sector 5242880, 524288 sectors, wp 5242880\nZone 00011: type 0x2 (Sequential-write-required), cond 0x1 (Empty), reset recommended 0, non_seq 0, sector 5767168, 524288 sectors, wp 5767168\n...\nZone 00078: type 0x2 (Sequential-write-required), cond 0x1 (Empty), reset recommended 0, non_seq 0, sector 40894464, 524288 sectors, wp 40894464\nZone 00079: type 0x2 (Sequential-write-required), cond 0x1 (Empty), reset recommended 0, non_seq 0, sector 41418752, 524288 sectors, wp 41418752\n")),(0,o.kt)("h2",{id:"scsi_debug"},(0,o.kt)("em",{parentName:"h2"},"scsi_debug")),(0,o.kt)("p",null,"The ",(0,o.kt)("em",{parentName:"p"},"scsi_debug")," kernel module can be used to create emulated ZBC SCSI disks\nthat use memory backing to store data, which is written to sectors.\nBecause this method uses memory as a backing store, the creation of large disks\nrequires a host with a large amount of DRAM."),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"This method stores sector data using volatile memory. This means that the data\nwritten to the emulated device will not survive the device's destruction and the\ndata written to this emulated device will not survive a host reboot."))),(0,o.kt)("h3",{id:"creating-an-emulated-zbc-disk"},"Creating an Emulated ZBC Disk"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"scsi_debug")," ZBC disks can be created using ",(0,o.kt)("em",{parentName:"p"},"modprobe")," with arguments.  The\nfollowing is an example that creates a host managed ZBC disk with 16GiB\ncapacity, 64MiB zones, and 32 conventional zones."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-plaintext"},"# modprobe scsi_debug \\\n    max_luns=1 \\\n    sector_size=4096 \\\n    dev_size_mb=16384 \\\n    zbc=managed \\\n    zone_size_mb=64 \\\n    zone_nr_conv=32\n")),(0,o.kt)("p",null,"After the disk has been created, it can be examined by using the ",(0,o.kt)("em",{parentName:"p"},"lsscsi"),"\ncommand."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-plaintext"},"# lsscsi -g\n...\n[11:0:0:0]   zbc     Linux    scsi_debug       0190  /dev/sdj   /dev/sg9\n...\n")),(0,o.kt)("p",null,'The vendor field of the disk is set to "scsi_debug". The kernel messages\nalso show the process whereby this disk came online.'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-plaintext"},"# dmesg\n...\nscsi_debug:sdebug_driver_probe: scsi_debug: trim poll_queues to 0. poll_q/nr_hw = (0/1)\nscsi host11: scsi_debug: version 0190 [20200710]\n                 dev_size_mb=16384, opts=0x0, submit_queues=1, statistics=0\nscsi 11:0:0:0: Direct-Access-ZBC Linux    scsi_debug       0190 PQ: 0 ANSI: 7\nsd 11:0:0:0: Power-on or device reset occurred\nsd 11:0:0:0: Attached scsi generic sg9 type 20\nsd 11:0:0:0: [sdj] Host-managed zoned block device\nsd 11:0:0:0: [sdj] 4194304 4096-byte logical blocks: (17.2 GB/16.0 GiB)\nsd 11:0:0:0: [sdj] Write Protect is off\nsd 11:0:0:0: [sdj] Mode Sense: 5b 00 10 08\nsd 11:0:0:0: [sdj] Write cache: enabled, read cache: enabled, supports DPO and FUA\nsd 11:0:0:0: [sdj] Optimal transfer size 4194304 bytes\nsd 11:0:0:0: [sdj] 256 zones of 16384 logical blocks\nsd 11:0:0:0: [sdj] Attached SCSI disk\n")),(0,o.kt)("h3",{id:"verifying-the-emulated-disk-1"},"Verifying The Emulated Disk"),(0,o.kt)("p",null,"The zone configuration of the emulated disk can be inspected by using\n",(0,o.kt)("a",{parentName:"p",href:"/zonedstorage.io/docs/tools/libzbc"},(0,o.kt)("em",{parentName:"a"},"libzbc")),", ",(0,o.kt)("a",{parentName:"p",href:"/zonedstorage.io/docs/tools/sg3utils"},(0,o.kt)("em",{parentName:"a"},"sg3utils"))," and\n",(0,o.kt)("a",{parentName:"p",href:"/zonedstorage.io/docs/tools/util-linux"},(0,o.kt)("em",{parentName:"a"},"util-linux"))," tools."),(0,o.kt)("h4",{id:"using-zbc_report_zones"},"Using zbc_report_zones"),(0,o.kt)("p",null,"Use ",(0,o.kt)("a",{parentName:"p",href:"/zonedstorage.io/docs/tools/libzbc#zone-information"},(0,o.kt)("em",{parentName:"a"},"zbc_report_zones"))," to verify the\nzone configuration of the newly-created emulated ZBC disk:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-plaintext"},"# zbc_report_zones /dev/sg9\nDevice /dev/sg9:\n    Vendor ID: Linux scsi_debug 0190\n    SCSI ZBC device interface, Host-managed zone model\n    33554432 512-bytes sectors\n    4194304 logical blocks of 4096 B\n    4194304 physical blocks of 4096 B\n    17.180 GB capacity\n    Read commands are unrestricted\n    4096 KiB max R/W size\n    Maximum number of open sequential write required zones: 8\n    256 zones from 0, reporting option 0x00\n256 / 256 zones:\nZone 00000: type 0x1 (Conventional), cond 0x0 (Not-write-pointer), sector 0, 131072 sectors\nZone 00001: type 0x1 (Conventional), cond 0x0 (Not-write-pointer), sector 131072, 131072 sectors\nZone 00002: type 0x1 (Conventional), cond 0x0 (Not-write-pointer), sector 262144, 131072 sectors\n...\nZone 00031: type 0x1 (Conventional), cond 0x0 (Not-write-pointer), sector 4063232, 131072 sectors\nZone 00032: type 0x2 (Sequential-write-required), cond 0x1 (Empty), reset recommended 0, non_seq 0, sector 4194304, 131072 sectors, wp 4194304\nZone 00033: type 0x2 (Sequential-write-required), cond 0x1 (Empty), reset recommended 0, non_seq 0, sector 4325376, 131072 sectors, wp 4325376\n...\nZone 00254: type 0x2 (Sequential-write-required), cond 0x1 (Empty), reset recommended 0, non_seq 0, sector 33292288, 131072 sectors, wp 33292288\nZone 00255: type 0x2 (Sequential-write-required), cond 0x1 (Empty), reset recommended 0, non_seq 0, sector 33423360, 131072 sectors, wp 33423360\n")),(0,o.kt)("h4",{id:"using-blkzone"},"Using blkzone"),(0,o.kt)("p",null,"Use ",(0,o.kt)("a",{parentName:"p",href:"/zonedstorage.io/docs/tools/util-linux#zone-report"},(0,o.kt)("em",{parentName:"a"},"blkzone")),' to verify the zone\nconfiguration of the newly-created emulated ZBC disk. This displays the same\ninformation that is returned by "zbc_report_zones", but it is displayed in a\ndifferent format:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-plaintext"},"# blkzone report /dev/sdj\n  start: 0x000000000, len 0x020000, cap 0x020000, wptr 0x000000 reset:0 non-seq:0, zcond: 0(nw) [type: 1(CONVENTIONAL)]\n  start: 0x000020000, len 0x020000, cap 0x020000, wptr 0x000000 reset:0 non-seq:0, zcond: 0(nw) [type: 1(CONVENTIONAL)]\n  start: 0x000040000, len 0x020000, cap 0x020000, wptr 0x000000 reset:0 non-seq:0, zcond: 0(nw) [type: 1(CONVENTIONAL)]\n...\n  start: 0x0003e0000, len 0x020000, cap 0x020000, wptr 0x000000 reset:0 non-seq:0, zcond: 0(nw) [type: 1(CONVENTIONAL)]\n  start: 0x000400000, len 0x020000, cap 0x020000, wptr 0x000000 reset:0 non-seq:0, zcond: 1(em) [type: 2(SEQ_WRITE_REQUIRED)]\n  start: 0x000420000, len 0x020000, cap 0x020000, wptr 0x000000 reset:0 non-seq:0, zcond: 1(em) [type: 2(SEQ_WRITE_REQUIRED)]\n...\n  start: 0x001fc0000, len 0x020000, cap 0x020000, wptr 0x000000 reset:0 non-seq:0, zcond: 1(em) [type: 2(SEQ_WRITE_REQUIRED)]\n  start: 0x001fe0000, len 0x020000, cap 0x020000, wptr 0x000000 reset:0 non-seq:0, zcond: 1(em) [type: 2(SEQ_WRITE_REQUIRED)]\n")))}p.isMDXComponent=!0}}]);